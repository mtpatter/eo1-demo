'''
ABOUT:
This Python program will display a false-color image from a GeoTiff generated by 
the classify.py program and save the image as a .png file. The four colors correspond to 
different terrain types:
1-Cloud (white)
2-Desert (brown)
3-Water (blue)
4-Vegetation (green)

DEPENDS:
PIL
gdal
numpy
matplotlib.pyplot
pylab

AUTHORS:
Jake Bruggemann
Maria Patterson

HISTORY:
February 2014: Original script (beta) by Maria Patterson.

USE:
For use on the Open Science Data Cloud public data commons.
> python viewClassifiedTiff.py TIFNAME [OUTFILE.png]
For example, if you have created a GeoTiff called italyClassified.tif with the classify.py program.
> python viewGeoTiff.py italyClassified.tif italyClassified.png
'''

__author__ = 'Jake Bruggemann'
__version__ = 0.2

def displayTif(path,outfile):
	tif = gdal.Open(path)
	band = tif.GetRasterBand(1)
        img = band.ReadAsArray()

        cmap = cm.get_cmap('PiYG',5)
	cmaplist = [cmap(i) for i in range(cmap.N)]
	cmaplist[0] = (0,0,0,0) #Border pixels
	cmaplist[1] = (1.0,1.0,1.0,1.0) #Cloud
	cmaplist[2] = (.5,.5,0,0) #Desert
	cmaplist[3] = (0,0,1.0,1.0) #Water
	cmaplist[4] = (0,.5,0,1.0) #Vegetation
        cmap = cmap.from_list('Custom cmap',cmaplist,cmap.N)

	imgplot = plt.imshow(img, interpolation="none",cmap = cmap)

	def format_coord(x, y):
    		col = int(x+0.5)
    		row = int(y+0.5)
        	z = img[row,col]
        	return 'x=%1.4f, y=%1.4f, z=%1.4f'%(x, y, z)

	plt.gca().format_coord = format_coord
        plt.axis('off')
	if outfile != None:
		plt.savefig(outfile,bbox_inches='tight')
	plt.show() 

#################################################
#################################################

if __name__ == '__main__':
    from PIL import Image
    from pylab import *
    import gdal, osr
    import matplotlib.pyplot as plt
    import numpy as np
    import argparse

    parser = argparse.ArgumentParser(description='View GeoTiff generated by classify.py.')
    parser.add_argument('tifname',type=str,help='Name of GeoTiff file.')
    parser.add_argument('outfile',nargs='?',type=str,default=None,help='Optional output png file name.')
    
    options = parser.parse_args()

    tiffname = options.tifname
    outfile = options.outfile
    displayTif(tiffname,outfile)
